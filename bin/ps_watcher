#!/usr/bin/env ruby
require 'logger'
require 'zk'
require 'daemons'
class PsWatcher
  def initialize
    @zk = ZK.new(zk_hosts)
    hostname = %x(hostname).split('.').first
    @zk_path = "/processes/#{hostname}"
    assert '/processes'
    assert @zk_path
  end

  def zk_hosts
    File.read('/etc/zookeeper.conf').lines.to_a.map(&:strip).join(',')
  end

  def assert path
    unless @zk.exists? path
      @zk.create path
    end
  end 

  def created(pid)
    if File.exist? "/proc/#{pid}"
      cmdline = File.open("/proc/#{pid}/cmdline").read.lines.first
      log 'new process'
      log cmdline
      @zk.create "#{@zk_path}/#{pid}", cmdline, :ephemeral => true
    end
  end

  def stopped(pid)
    log "#{pid} stopped"
    @zk.rm_rf "#{@zk_path}/#{pid}"
  end

  def log msg
    @logger ||= Logger.new(STDOUT)
    @logger.info msg
  end

  def pids
    Dir.foreach('/proc').grep /^\d+$/
  end

  def run
    old_pids = []
    loop do
      current_pids = pids

      stopped_pids = old_pids - current_pids
      stopped_pids.each{|pid| stopped(pid)}

      created_pids = current_pids - old_pids
      created_pids.each{|pid| created(pid)}

      old_pids = current_pids
      sleep 3
    end
  end
end
Daemons.run_proc('ps_watcher' :log_output => true) do
  PsWatcher.new.run
end
